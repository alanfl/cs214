{\rtf1\ansi\ansicpg1252\cocoartf1561\cocoasubrtf610
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\b\fs24 \cf0 Midterm Review
\b0 \
\
union v. struct:\
\
struct example_t \{\
    int a;\
    double b;\
    float c;\
\};\
\
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0
\cf0 union example2 \{\
    int a;\
    double b;\
    float c;\
\};\
\
union - memory occupied will be large enough to hold the 
\b largest
\b0  member of the union\
    in example2, the union will have 8 bytes allocated to it, for a double (8 bytes)\
\
struct - memory occupied will be large enough to hold all members of the struct\
    in example_t, on allocation, the union will have 16 bytes ( int 4 + double 8 + float 4 ) allocated to it\
    struct may not necessarily reflect this however, due to alignment done by the system\
\
4GB / 16 ( 2^4 ) = 2^32 / 2^4 = 2^28 \
\
2^5 = 32\
2^10 = 1024 ~1 thousand\
\
2^20 = 1Mb = ~1 million\
\
2^30 = 1Gb = ~1 billion\
2^32 = 4Gb = ~4 billion bytes\
\
=====\
\
pointers to pointers\
\
int p = 3;\
int * ptr = &p\
sizeof(ptr) = 4 (32-bit) or 8 (64-bit)\
\
int **dptr = &ptr\
\
dptr -> address of (address of (p lives))\
*dptr -> address of (p lives)\
**dptr -> lives\
\
int * annoyinglyTrue = &ptr;\
(cannot dereference)\
\
=====\
\
function pointers:\
\
int a = 2;\
int * ptr = &a;\
\
int someFunction(char stuff, double things)\
\{\'85\}\
\
// function pointer\
int (*fptr)(char, double) = someFunction;\
OR\
int (*fptr)(char, double) = &someFunction;\
\
fptr(\'91a\'92, 1.2\'92);\
\
int * p = &a;\
\
int (*broken)(char, double) = (int (*)(char, double) )p;\
void (*boom)() = (void (*)() ) p;}